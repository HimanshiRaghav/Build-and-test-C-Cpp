name: C/C++ Building and testing

on:
  workflow_call:
    inputs:
      compiler:
        description: Compiler either gcc or clang
        required: true
        type: string
      build-system:
        description: Build system either make or cmake
        required: true
        type: string

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout 
        uses: actions/checkout@v3

      - name: Validate inputs
        run: |
          if [[ "${{ inputs.compiler }}" != "gcc" && "${{ inputs.compiler }}" != "clang" ]]; then 
            echo "Invalid compiler: ${{ inputs.compiler }}"
            exit 1
          fi
          if [[ "${{ inputs.build-system }}" != "make" && "${{ inputs.build-system }}" != "cmake" ]]; then
            echo "Invalid build system: ${{ inputs.build-system }}"
            exit 1
          fi

      - name: Install compiler
        run: |
          sudo apt-get update
          if [[ "${{ inputs.compiler }}" == "gcc" ]]; then
            sudo apt-get install -y build-essential
          else
            sudo apt-get install -y clang make
          fi

      - name: Configure environment variables
        run: |
          if [[ "${{ inputs.compiler }}" == "clang" ]]; then
            echo "CC=clang" >> $GITHUB_ENV
            echo "CXX=clang++" >> $GITHUB_ENV
          else
            echo "CC=gcc" >> $GITHUB_ENV
            echo "CXX=g++" >> $GITHUB_ENV
          fi

      - name: Install CMake
        if: ${{ inputs.build-system == 'cmake' }}
        run: sudo apt-get install -y cmake

      - name: Generate default CMakeLists.txt if missing
        if: ${{ inputs.build-system == 'cmake' }}
        run: |
          if [ ! -f CMakeLists.txt ]; then
            echo "CMakeLists.txt not found. Generating a default one..."
            echo 'cmake_minimum_required(VERSION 3.10)' > CMakeLists.txt
            echo 'project(MyProject)' >> CMakeLists.txt
            echo 'set(CMAKE_CXX_STANDARD 17)' >> CMakeLists.txt
            echo 'file(GLOB SOURCES "*.cpp")' >> CMakeLists.txt
            echo 'add_executable(MyExecutable ${SOURCES})' >> CMakeLists.txt
          fi


      - name: Build with CMake
        if: ${{ inputs.build-system == 'cmake' }}
        run: |
          mkdir -p build logs
          cd build
          cmake .. > ../logs/cmake_configure.log 2>&1
          make > ../logs/cmake_build.log 2>&1

      - name: Build with Make
        if: ${{ inputs.build-system == 'make' }}
        run: |
          mkdir -p logs
          make > logs/make_build.log 2>&1

      - name: Run Unit Tests
        run: |
          mkdir -p logs
          if [ -f "./run_tests.sh" ]; then
            chmod +x ./run_tests.sh
            ./run_tests.sh > logs/test_output.log 2>&1
            echo "Exit Code: $?" >> logs/test_output.log
          elif [ -f "./build/tests/test" ]; then
            ./build/tests/test > logs/test_output.log 2>&1
            echo "Exit Code: $?" >> logs/test_output.log
          elif [ -f "./test" ]; then
            ./test > logs/test_output.log 2>&1
            echo "Exit Code: $?" >> logs/test_output.log
          else
            echo "No test executable or test script found." > logs/test_output.log
          fi

      - name: Store build and test logs
        if: always()
        run: |
          mkdir -p logs
          find build -name "*.log" -exec cp {} logs/ \; 2>/dev/null || true
          find . -maxdepth 1 -name "*.log" -exec cp {} logs/ \; 2>/dev/null || true
        continue-on-error: true

      - name: Upload Logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: build-and-test-logs
          path: logs/

      - name: Summarize Build and Test Results
        if: always()
        run: |
          echo "## Build and Test Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Step | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|------|--------|" >> $GITHUB_STEP_SUMMARY

          BUILD_LOG="logs/cmake_build.log"
          [ "${{ inputs.build-system }}" == "make" ] && BUILD_LOG="logs/make_build.log"

          if grep -i "error:" "$BUILD_LOG" | grep -v 'note:'; then
            echo "| Build | ❌ Failed |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Build | ✅ Passed |" >> $GITHUB_STEP_SUMMARY
          fi

          if grep -q "No test executable or test script found" logs/test_output.log; then
            echo "| Tests | ⚠️ Not Found |" >> $GITHUB_STEP_SUMMARY
          elif grep -i "error:" logs/test_output.log || grep -i "fail" logs/test_output.log; then
            echo "| Tests | ❌ Failed |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Tests | ✅ Passed |" >> $GITHUB_STEP_SUMMARY
          fi
